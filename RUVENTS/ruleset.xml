<?xml version="1.0"?>
<ruleset name="RUVENTS">
    <config name="installed_paths" value="vendor/slevomat/coding-standard/SlevomatCodingStandard,vendor/fig-r/psr2r-sniffer/PSR2R,./vendor/pheromone/phpcs-security-audit/example_base_ruleset.xml,vendor/escapestudios/symfony2-coding-standard"/>

    <exclude-pattern>/.git/</exclude-pattern>
    <exclude-pattern>/vendor/</exclude-pattern>
    <exclude-pattern>/node_modules/</exclude-pattern>
    <exclude-pattern>*.js</exclude-pattern>
    <exclude-pattern>*.css</exclude-pattern>
    <!-- Специфичные для Yii -->
    <exclude-pattern>/runtime/</exclude-pattern>
    <exclude-pattern>/protected/extensions/</exclude-pattern>
    <!-- Специфичные для Symfony -->
    <exclude-pattern>/var/cache/</exclude-pattern>
    <!-- Специфичные для Laravel -->
    <exclude-pattern>/_ide_helper.php</exclude-pattern>

    <!--<rule ref="RUVENTS"/>-->

    <rule ref="RUVENTS.Views.ShortEcho"/>
    <rule ref="RUVENTS.Views.ShortTagWhitespace"/>
    <rule ref="RUVENTS.Functions.UselessParameterDefaultValue">
        <rule ref="RUVENTS.Views.ShortTagForce"></rule>
        <exclude name="SlevomatCodingStandard.Functions.UselessParameterDefaultValue.UselessParameterDefaultValue"/>
    </rule>
    <rule ref="RUVENTS.NamingConventions.CamelCaseFunctionName">
        <properties>
            <property name="useCustomId" type="bool" value="true"/>
        </properties>
    </rule>

    <!--<rule ref="RUVENTS.CodeAnalysis.EmptyStatement"> toDo: Походу не нужен, благодаря Squiz.Commenting.EmptyCatchComment
        <properties>
            <property name="ignoreEmptyCatchStatements" type="bool" value="true"/>
        </properties>
    </rule>-->

    <!-- Разрешаем наличие php-файлов без php-кода в них. -->
    <rule ref="Internal.NoCodeFound">
        <severity>0</severity>
    </rule>

    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <!--<rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/> разработчики иногда переопределяют функции только для того, что бы поменять значение по-умолчанию для параметра метода -->
    <rule ref="Generic.Commenting.DocComment">
        <exclude name="Generic.Commenting.DocComment.TagValueIndent"/>
        <!-- Исключаем данную проверку для вьюшек, так как описание используемых в них переменных не является по-сути док-блоком -->
        <exclude-pattern>*/views/*</exclude-pattern>
        <exclude-pattern>*/partials/*</exclude-pattern>
        <exclude-pattern>/resources/*/*.blade.php</exclude-pattern>
    </rule>
    <!--<rule ref="Generic.ControlStructures.DisallowYodaConditions"/> так как мы на светлой стороне! -->
    <rule ref="Generic.ControlStructures.InlineControlStructure">
        <exclude-pattern>/resources/*/*.blade.php</exclude-pattern>
    </rule>
    <rule ref="Generic.Files.ByteOrderMark"/>
    <rule ref="Generic.Files.EndFileNewline"/>
    <!-- обдумать это требование
    <rule ref="Generic.Files.InlineHTML">
        <exclude-pattern>*/views/*</exclude-pattern>
        <exclude-pattern>*/partials/*</exclude-pattern>
        <exclude-pattern>/resources/*/*.blade.php</exclude-pattern>
    </rule>
    -->
    <rule ref="Generic.Files.LineEndings"/>
    <rule ref="Generic.Files.OneClassPerFile"/>
    <rule ref="Generic.Files.OneInterfacePerFile"/>
    <rule ref="Generic.Files.OneObjectStructurePerFile"/>
    <rule ref="Generic.Files.OneTraitPerFile"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Formatting.SpaceBeforeCast"/>
    <rule ref="Generic.Formatting.SpaceAfterNot"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" type="int" value="11"/>
            <property name="absoluteComplexity" type="int" value="30"/>
        </properties>
    </rule>
    <!-- подумать, надо оно?
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property name="nestingLevel" type="int" value="10"/>
            <property name="absoluteNestingLevel" type="int" value="15"/>
        </properties>
    </rule>
    -->
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.RequireStrictTypes"/>
    <rule ref="Generic.PHP.BacktickOperator"/>
    <!--<rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/> так как для шаблонов часто надо -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.DisallowAlternativePHPTags"/>
    <!--<rule ref="Generic.PHP.DisallowShortOpenTag"/> toDo: Разобраться с этим, так то надо обыграть... -->
    <rule ref="Generic.PHP.DiscourageGoto"/>
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.PHP.LowerCaseType"/>
    <rule ref="Generic.PHP.NoSilencedErrors"/>
    <rule ref="Generic.PHP.SAPIUsage"/>
    <rule ref="Generic.PHP.Syntax">
        <!-- toDo: Потому что не умеет запятую после последнего параметра в многострочных вызовах функций... -->
        <exclude name="Generic.PHP.Syntax.PHPSyntax"/>
    </rule>
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <rule ref="Generic.VersionControl.GitMergeConflict"/>
    <rule ref="Generic.VersionControl.SubversionProperties"/>
    <!--<rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing"> toDo: разобраться что это и надо ли...
        <properties>
            <property name="spacing" type="int" value="0"/>
            <property name="ignoreNewlines" type="bool" value="false"/>
        </properties>
    </rule>-->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>
    <rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>
    <rule ref="Generic.WhiteSpace.SpreadOperatorSpacingAfter">
        <properties>
            <property name="ignoreNewlines" type="bool" value="false"/>
            <property name="spacing" type="int" value="0"/>
        </properties>
    </rule>

    <rule ref="PEAR.Classes.ClassDeclaration"/>
    <rule ref="PEAR.Commenting.ClassComment">
        <exclude-pattern>/tests/*</exclude-pattern>
        <exclude name="PEAR.Commenting.ClassComment.MissingAuthorTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingCategoryTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingLicenseTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingLinkTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingPackageTag"/>
    </rule>
    <!-- Вроде как полностью дублируется Squiz
    <rule ref="PEAR.Commenting.FunctionComment">
        <exclude-pattern>/tests/*</exclude-pattern>
        <exclude name="PEAR.Commenting.FunctionComment.ParamCommentAlignment"/>
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamComment"/>
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamTag"/>
        <exclude name="PEAR.Commenting.FunctionComment.MissingReturn"/>
        &lt;!&ndash; toDo: Потому что нет желания выравнивать переменные в doc-блоках... &ndash;&gt;
        <exclude name="PEAR.Commenting.FunctionComment.SpacingAfterParamType"/>
        <exclude name="PEAR.Commenting.FunctionComment.SpacingAfterParamName"/>
    </rule>
    -->
    <rule ref="PEAR.Commenting.InlineComment"/>
    <rule ref="PEAR.ControlStructures.ControlSignature"/>
    <rule ref="PEAR.ControlStructures.MultiLineCondition"/>
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine"/>
        <exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket"/>
    </rule>
    <rule ref="PEAR.Functions.FunctionDeclaration"/>
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <rule ref="PEAR.NamingConventions.ValidClassName">
        <exclude-pattern>*/migrations/*</exclude-pattern>
    </rule>
    <rule ref="PEAR.NamingConventions.ValidFunctionName">
        <exclude name="PEAR.NamingConventions.ValidFunctionName.PrivateNoUnderscore"/>
    </rule>
    <rule ref="PEAR.NamingConventions.ValidVariableName">
        <exclude name="PEAR.NamingConventions.ValidVariableName.PrivateNoUnderscore"/>
    </rule>
    <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent">
        <!-- Исключаем данную проверку для вьюшек, так как описание используемых в них переменных не является по-сути док-блоком -->
        <exclude-pattern>*/views/*</exclude-pattern>
        <exclude-pattern>*/partials/*</exclude-pattern>
        <exclude-pattern>/resources/*/*.blade.php</exclude-pattern>
    </rule>
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace"/>
    <!--<rule ref="PEAR.WhiteSpace.ScopeIndent"/> toDo: Как-то странно работает со switch case... -->

    <rule ref="PSR1.Classes.ClassDeclaration"/>
    <rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
        <exclude-pattern>*/migrations/*</exclude-pattern>
        <exclude-pattern>*/Yii.php</exclude-pattern>
    </rule>
    <!--<rule ref="PSR1.Files.SideEffects"/> toDo: спорное правило... -->
    <rule ref="PSR1.Methods.CamelCapsMethodName"/>

    <rule ref="PSR2.Classes.ClassDeclaration"/>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing"/>
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
    <rule ref="PSR2.ControlStructures.SwitchDeclaration"/>
    <rule ref="PSR2.Files.ClosingTag"/>
    <rule ref="PSR2.Files.EndFileNewline"/>
    <rule ref="PSR2.Methods.FunctionCallSignature">
        <exclude name="PSR2.Methods.FunctionCallSignature.ContentAfterOpenBracket"/>
    </rule>
    <rule ref="PSR2.Methods.FunctionClosingBrace"/>
    <rule ref="PSR2.Methods.MethodDeclaration">
        <!-- Данным исключением обязаны старому Yii 1.x -->
        <exclude name="PSR2.Methods.MethodDeclaration.Underscore"/>
    </rule>
    <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
    <rule ref="PSR2.Namespaces.UseDeclaration"/>

    <rule ref="PSR12.Classes.ClassInstantiation"/>
    <rule ref="PSR12.Classes.ClosingBrace"/>
    <rule ref="PSR12.Traits.UseDeclaration"/>
    <rule ref="PSR12.Files.FileHeader"/>
    <rule ref="PSR12.Files.OpenTag"/>
    <rule ref="PSR12.Files.ImportStatement"/>
    <!--<rule ref="PSR12.Files.DeclareStatement"/> пока спорно -->
    <!--<rule ref="PSR12.Classes.AnonClassDeclaration"/> не понятно что делает, проверить негде-->
    <rule ref="PSR12.Functions.NullableTypeDeclaration"/>
    <rule ref="PSR12.Functions.ReturnTypeDeclaration"/>
    <rule ref="PSR12.Keywords.ShortFormTypeKeywords"/>
    <rule ref="PSR12.Namespaces.CompoundNamespaceDepth"/>
    <rule ref="PSR12.Operators.OperatorSpacing"/>
    <rule ref="PSR12.Properties.ConstantVisibility"/>
    <rule ref="PSR12.ControlStructures.BooleanOperatorPlacement"/>
    <rule ref="PSR12.ControlStructures.ControlStructureSpacing"/>
    <rule ref="Generic.Commenting.Fixme"/>
    <rule ref="Generic.Commenting.Todo"/>

    <rule ref="Generic.CodeAnalysis.EmptyPHPStatement"/>
    <!--
        Расширенные:
        <rule ref="Generic.CodeAnalysis.EmptyStatement -> RUVENTS.CodeAnalysis.EmptyStatement"/> добавлена опциональность проверки на пустые catch блоки...

        Отключенные:
        <rule ref="Generic.Classes.DisallowShortArraySyntax"/> так как мы форсируем короткий синтаксис массивов...
        <rule ref="Generic.Classes.DuplicateClassName"/> для MVC приложений сложно соблюсти...
        <rule ref="Generic.Classes.OpeningBraceSameLine"/> мы требуем, что бы у класса "{" была в новой строке...
        <rule ref="Generic.CodeAnalysis.AssignmentInCondition"/> это иногда очень удобно и улучшает читабельность кода при правильном использовании...
        <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/> по хорошему, конечно, такого быть не должно, но бывает...
        <rule ref="Generic.Commenting.Fixme"/> вообще, может и не хорошо такое иметь в кодовой базе, может включить?...
        <rule ref="Generic.Commenting.Todo"/> вообще, может и не хорошо такое иметь в кодовой базе, может включить?...
        <rule ref="Generic.Files.LineLength"/> позволяем произвольную максимальную длину строки...
    -->

    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeySpecified"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoKeySpecified"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>
        <exclude-pattern>*/views/*</exclude-pattern>
        <exclude-pattern>*/partials/*</exclude-pattern>
    </rule>
    <rule ref="Squiz.Classes.ClassDeclaration"/>
    <rule ref="Squiz.Classes.ClassFileName">
        <exclude-pattern>*/migrations/*</exclude-pattern>
    </rule>
    <rule ref="Squiz.Classes.DuplicateProperty"/>
    <rule ref="Squiz.Classes.LowercaseClassKeywords"/>
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <rule ref="Squiz.Classes.ValidClassName">
        <exclude-pattern>*/migrations/*</exclude-pattern>
    </rule>
    <rule ref="Squiz.Commenting.BlockComment">
        <!-- Потому что хочется @noinspection -->
        <exclude name="Squiz.Commenting.BlockComment.SingleLine"/>
        <exclude-pattern>*/views/*</exclude-pattern>
        <exclude-pattern>*/partials/*</exclude-pattern>
    </rule>
    <!--<rule ref="Squiz.Commenting.ClassComment"/> toDo: Потому что не получилось разрешить @property-read... -->
    <!--<rule ref="Squiz.Commenting.ClosingDeclarationComment"/>-->
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>
    <!--<rule ref="Squiz.Commenting.FileComment"/> вот бы найти возможность запускать его ТОЛЬКО для шаблонов -->
    <rule ref="Squiz.Commenting.FunctionComment">
        <exclude-pattern>/tests/*</exclude-pattern>
        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/>
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>
        <!-- toDo: Потому что нет желания выравнивать параметры в doc-блоках -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>
    </rule>
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag"/>
    <rule ref="Squiz.Commenting.InlineComment">
        <exclude-pattern>*/views/*</exclude-pattern>
        <exclude-pattern>*/partials/*</exclude-pattern>
    </rule>
    <!--<rule ref="Squiz.Commenting.LongConditionClosingComment"/>-->
    <rule ref="Squiz.Commenting.PostStatementComment"/>
    <rule ref="Squiz.Commenting.VariableComment">
        <!-- Не требуем обязательного наличия @var в документации свойств классов. -->
        <exclude name="Squiz.Commenting.VariableComment.MissingVar"/>
        <!-- Неопционально требует boolean вместо bool и integer вместо int. -->
        <exclude name="Squiz.Commenting.VariableComment.IncorrectVarType"/>
    </rule>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ElseIfDeclaration">
        <exclude name="Squiz.ControlStructures.ElseIfDeclaration.NotAllowed"/>
    </rule>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.InlineIfDeclaration">
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.NoBrackets"/>
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.NotSingleLine"/>
    </rule>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="Squiz.ControlStructures.SwitchDeclaration">
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.BreakIndent"/>
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.DefaultNoBreak"/>
    </rule>
    <!--<rule ref="Squiz.Files.FileExtension"/>-->
    <!--<rule ref="Squiz.Formatting.OperatorBracket.MissingBrackets"/>-->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" type="int" value="1"/>
            <property name="requiredSpacesAfterOpen" type="int" value="0"/>
            <property name="requiredSpacesBeforeClose" type="int" value="0"/>
        </properties>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="Squiz.Functions.FunctionDuplicateArgument"/>
    <rule ref="Squiz.Functions.GlobalFunction"/>
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>
    <rule ref="Squiz.NamingConventions.ValidFunctionName">
        <exclude name="Squiz.NamingConventions.ValidFunctionName.PrivateNoUnderscore"/>
    </rule>
    <rule ref="Squiz.NamingConventions.ValidVariableName">
        <exclude name="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore"/>
    </rule>
    <rule ref="Squiz.Objects.DisallowObjectStringIndex"/>
    <!--<rule ref="Squiz.Objects.ObjectInstantiation"/>-->
    <rule ref="Squiz.Objects.ObjectMemberComma"/>
    <rule ref="Squiz.Operators.ComparisonOperatorUsage">
        <exclude name="Squiz.Operators.ComparisonOperatorUsage.ImplicitTrue"/>
    </rule>
    <rule ref="Squiz.Operators.IncrementDecrementUsage"/>
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    <!--<rule ref="Squiz.PHP.DisallowBooleanStatement"/>-->
    <!--<rule ref="Squiz.PHP.DisallowComparisonAssignment"/>-->
    <!--<rule ref="Squiz.PHP.DisallowInlineIf"/>-->
    <!--<rule ref="Squiz.PHP.DisallowMultipleAssignments"/>-->
    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
    <rule ref="Squiz.PHP.DiscouragedFunctions"/>
    <rule ref="Squiz.PHP.EmbeddedPhp">
        <exclude name="Squiz.PHP.EmbeddedPhp.OpenTagIndent"/>
        <exclude name="Squiz.PHP.EmbeddedPhp.ContentAfterOpen"/>
        <exclude name="Squiz.PHP.EmbeddedPhp.ContentBeforeEnd"/>
        <exclude-pattern>*/views/*</exclude-pattern>
        <exclude-pattern>*/partials/*</exclude-pattern>
    </rule>
    <rule ref="Squiz.PHP.Eval"/>
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <rule ref="Squiz.PHP.InnerFunctions"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <!-- Требуем отсутствие пробелов вокруг конкатенации. Компактность -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <exclude name="PSR12.Operators.OperatorSpacing.NoSpaceAfter"/>
        <exclude name="PSR12.Operators.OperatorSpacing.NoSpaceBefore"/>
    </rule>
    <!-- Проверяем легитимность использования двойных кавычек в качестве ограничителя строк -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage">
        <exclude name="Squiz.Strings.DoubleQuoteUsage.ContainsVar"/>
    </rule>
    <rule ref="Squiz.Strings.EchoedStrings"/>
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <!--<rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing"/> не работает на цепочных вызовах-->
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" type="int" value="1"/>
            <property name="spacingBeforeFirst" type="int" value="0"/>
            <property name="spacingAfterLast" type="int" value="0"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
        <properties>
            <property name="spacing" type="int" value="1"/>
            <property name="spacingBeforeFirst" type="int" value="0"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" type="bool" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.PropertyLabelSpacing"/>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

    <rule ref="SlevomatCodingStandard.Functions">
        <exclude name="SlevomatCodingStandard.Functions.FunctionLength.FunctionLength"/>
        <exclude name="SlevomatCodingStandard.Functions.DisallowTrailingCommaInCall.DisallowedTrailingComma"/>
        <exclude name="SlevomatCodingStandard.Functions.RequireTrailingCommaInCall.MissingTrailingComma"/>
        <!-- Рано такое делать. IDEA/PhpStorm не умеют форматировать такие... -->
        <exclude name="SlevomatCodingStandard.Functions.TrailingCommaInCall.MissingTrailingComma"/>
    </rule>

    <rule ref="Zend.Files.ClosingTag">
        <exclude-pattern>*/views/*</exclude-pattern>
        <exclude-pattern>*/partials/*</exclude-pattern>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName"/>

    <rule name="Security"/>

    <rule ref="Symfony">
        <exclude name="Symfony.Commenting.FunctionComment.MissingParamTag"/>
        <exclude name="Symfony.Commenting.FunctionComment.MissingReturn"/>
        <exclude name="Symfony.Commenting.License.Warning"/>
        <exclude name="Symfony.ControlStructure.YodaConditions.Invalid"/>
        <exclude name="Symfony.Commenting.FunctionComment.SpacingAfterParamType"/>
        <exclude name="Symfony.Commenting.FunctionComment.SpacingAfterParamName"/>
        <exclude name="Symfony.NamingConventions.ValidClassName.InvalidAbstractName"/>
        <exclude name="Symfony.Files.AlphanumericFilename.Invalid"/>
        <exclude name="Generic.PHP.DisallowShortOpenTag.PossibleFound"/>
        <exclude-pattern>/config/*</exclude-pattern>
        <exclude-pattern>*/views/*</exclude-pattern>
        <exclude-pattern>*/partials/*</exclude-pattern>
    </rule>

    <rule ref="Symfony.Functions.Arguments.Invalid">
        <exclude-pattern>*</exclude-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.DisallowTrailingCommaInDeclaration.DisallowedTrailingComma">
        <exclude-pattern>*</exclude-pattern>
    </rule>
    <rule ref="PEAR.Functions.FunctionDeclaration.NewlineBeforeOpenBrace">
        <exclude-pattern>*</exclude-pattern>
    </rule>
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration.NewlineBeforeOpenBrace">
        <exclude-pattern>*</exclude-pattern>
    </rule>
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace.Line">
        <exclude-pattern>*</exclude-pattern>
    </rule>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace.ContentBefore">
        <exclude-pattern>*</exclude-pattern>
    </rule>

</ruleset>
